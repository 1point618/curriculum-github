title: Resetting History
pre-requisites: DSS-29_unstaging
learning-objective: Discover steps you can take when you need to rewrite history.
screens:
  - image-slide:
      title: Git Reset
      image: reset-visual.png
      presenter-script: |
        Sometimes we are working on a branch and we decide things aren't going quite like we had planned. We want to reset some, or even all, of our files to look like what they were at a different point in history. We can do that with `git reset`.

        Remember that there are three different snapshots of our project at any given time. The first is the most recent commit. The second is the staging area (also called the index). The third is the working directory (i.e. whatever you currently have saved on disk). The `git reset` command has three modes, and they allow us to change some or all of these three snapshots.

        It also helps to know what branches technically are: each is a pointer, or reference, to the latest commit in a line of work. As we add new commits, the currently checked-out branch "moves forward," so that it always points to the most recent commit.

  - image-slide:
      title: Git Reset Modes
      image: reset-modes.png
      presenter-script: |
        The three modes for git reset are: `--soft`, `--mixed`, and `--hard`. For these examples, assume that we have a "clean" working directory, i.e. there are no uncommited changes.

        * `git reset --soft <my-branch> <other-commit>` moves `<my-branch>` to point at `<other-commit>`. However, the working directory and staging area remain untouched. Since the snapshot that `<my-branch>` points to now differs from the index's snapshot, this command effectively stages all differences between those snapshots. This is a good command to use when you have made a large number of small commits and you would like to regroup them into a single commit.

        * With the `--mixed` option, Git makes `<my-branch>` *and* the staging area look like the `<other-commit>` snapshot. This is the default mode: if you don't include a mode flag, Git will assume you want `--mixed`. `--mixed` is useful if you want to keep all of your changes in the working directory, but change whether and how you commit those changes.

        * `--hard` is the most drastic option. With this, Git will now make all 3 snapshots -- <my-branch>, the staging area, *and* your working directory -- look like they did at `<other-commit>`. This can be dangerous! We've assumed so far that our working directory is clean. If it is not, and you have uncommited changes, `git reset --hard` will *delete all of those changes*. Even with a clean working directory, use `--hard` only if you're sure you want to completely undo earlier changes.

        Let's take a look at each of these options in action.
  - video-slide:
      title: Using the Soft Reset
      video: https://youtu.be/220qkGeEn6A
      video-script:
        - do: "Type git log --oneline --graph --decorate --all"
          say: "Let's start by exploring the soft reset. First, we will use the log command to look at the history of our project."
        - do: "Show HEAD"
          say: "Using the ASCII graph we created earlier, we can see the current location of `HEAD`. We want to go back two commits in our history."
        - do: "Type git reset --soft HEAD~2"
          say: "We type git reset --soft, then we tell git where we want to reset to. In this case, the tilde tells git we want to reset to two commits before the current location of `HEAD`."
        - do: "Type git status"
          say: "Now when we type git status we can see that the changes we made in the last two commits are sitting in the staging area waiting to be committed."
        - do: "Type git log --oneline --graph --decorate --all"
          say: "When we view our git log, we can see that the `HEAD` is now sitting two commits earlier than it was before we used git reset."
        - do: "Type git commit -m\"grouping commits for cleaner history\""
          say: "Let's go ahead and re-commit these changes."
      production-notes:
  - video-slide:
      title: Using the Mixed Reset
      video: https://www.youtube.com/watch?v=aYNOCvVevic
      video-script:
        - do: "Type git log --oneline --graph --decorate --all"
          say: "Next we will explore the mixed reset. Once again, we will start by viewing the history of our project."
        - do: "Show HEAD"
          say: "This time we only want to go back one commit in history."
        - do: "Type git reset HEAD~"
          say: "We can type git reset without any options since --mixed is the default mode for reset, then we tell git where we want to reset to. In this case, the tilde tells git we want to reset to one commit before the current location of `HEAD`."
        - do: "Type git status"
          say: "Now, when we type git status the changes we made in the last commit have been moved back to the working directory. We need to add them to the staging area before we can commit them."
        - do: "Type git commit -m\"another reset example\""
          say: "Let's go ahead and re-commit these changes."
      production-notes:
  - video-slide:
      title: Using the Hard Reset
      video: https://youtu.be/V66d5e8Ku4w
      video-script:
        - do: "Type git log --oneline --graph --decorate --all"
          say: "Finally we will explore the hard reset."
        - do: "Show HEAD"
          say: "This time, we want to go all the way back to our initial commit to get rid of all of these junk files we have created."
        - do: "Type git reset --hard <commit ID>"
          say: "We type git reset --hard, but this time we will use the commit ID to tell git where we want to reset."
        - do: "Type git status"
          say: "This time when we type git status, we see that our working directory is clean. This is because reset --hard also discards the contents of the working directory."
      production-notes:
  - image-slide:
      title: "Git Reset Options: Recap"
      image: reset-modes.png
      presenter-script: |
        * `git revert` reverts a specific commit. `git reset` resets git _to_ a specific commit.
        * `git reset --soft <to_commit>` resets git to a specific commit, and puts the commits you're resetting into the staging area where they can be easily re-committed.
        * `git reset --mixed <to_commit>` resets git to a specific commit, and puts the commits you're resetting into the working directory so you can edit them directly.
        * `git reset --hard <to_commit>` resets git to a specific commit, and deletes the commits you're resetting.
        * Just like with `git revert` you can use the commit ID, or you can use the syntax `HEAD~<mumber>`. The number you put will be the number of commits backwards from the current `HEAD` that git will move the new `HEAD` to.
        * You can always use `git log` to see all your previous history to know where to reset to.
additional-labs:
additional-questions:
resources:
  - title: "Video: GitHub & Git Foundations - Reset"
    url: https://youtu.be/BKPjPMVB81g
